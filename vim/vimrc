let s:is_windows = has('win32') || has('win64')
let s:is_mac = has('macunix')
if s:is_windows
    let s:data_dir = $LOCALAPPDATA . '\vim-data'
    let s:vimrc_local = $HOME . '\vimfiles\vimrc.local'
else
    let s:data_dir = $HOME . '/.local/share/vim'
    let s:vimrc_local = $HOME . '/.vim/vimrc.local'
endif

call plug#begin(s:data_dir . '/plugged')

Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim'
Plug 'embear/vim-localvimrc'
Plug 'godlygeek/tabular'
if s:is_windows
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
elseif s:is_mac
    Plug '/opt/homebrew/opt/fzf'
else
    Plug 'junegunn/fzf', { 'dir': '~/.local/share/fzf', 'do': './install --all --xdg' }
endif
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/jsonc.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline'
Plug 'vim-python/python-syntax'

" colorschemes
Plug 'chriskempson/base16-vim'
Plug 'frankier/neovim-colors-solarized-truecolor-only'
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'
Plug 'tomasr/molokai'
Plug 'vim-airline/vim-airline-themes'
Plug 'w0ng/vim-hybrid'

call plug#end()

" use data dir
let g:netrw_home = s:data_dir
let s:swap_dir = s:data_dir . '/swap'
let &undodir = s:data_dir . '/undo'
let &viminfofile = s:data_dir . '/viminfo'
set directory&vim " reset to default
let &directory = s:swap_dir . '//,' . &directory
call mkdir(s:swap_dir, 'p')
call mkdir(&undodir, 'p')

" general settings
filetype plugin indent on
syntax enable

set hidden
set virtualedit=block
set wildmenu
set wildmode=longest:full,full
set nowrap
set nostartofline
set ruler
set history=10000
set showcmd
set mouse=a
set mousemodel=popup
set backspace=indent,eol,start
set formatprg=par
set visualbell t_vb=

set hlsearch
set ignorecase
set incsearch
set smartcase

set tabstop=4
set shiftwidth=4
set expandtab
set smarttab

set nofoldenable
set foldmethod=syntax
set foldopen-=block

set undofile
set nobackup

let c_space_errors = 1
let g:python_highlight_all = 1

" general mappings
let mapleader = "\<Space>"
noremap <Space> <Nop>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>f :Files<CR>
nnoremap <silent> <Leader>n :nohlsearch<CR>
nnoremap <silent> <Leader>t :Tags<CR>
nnoremap <silent> <Leader>w :update<CR>

nmap Y y$
nmap <silent> <C-p> :bp<CR>
nmap <silent> <C-n> :bn<CR>

" airline settings
set laststatus=2
set ttimeoutlen=10
set noshowmode
let g:airline_extensions = ['branch', 'coc', 'tabline']
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#show_tab_type = 0

" tmuxline settings
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
      \'a'       : '#S',
      \'win'     : ['#I', '#W'],
      \'cwin'    : ['#I', '#W'],
      \'z'       : '#H',
      \'options' : {'status-justify' : 'left'}}

" coc.nvim settings
set updatetime=300
set cmdheight=2
set shortmess+=c
let g:coc_global_extensions = ['coc-json', 'coc-pyright']

" coc.nvim mappings
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nmap <silent> <Leader>d <Plug>(coc-definition)
nmap <silent> <Leader>y <Plug>(coc-type-definition)
nmap <silent> <Leader>i <Plug>(coc-implementation)
nmap <silent> <Leader>r <Plug>(coc-references)
nmap <silent> <Leader>rn <Plug>(coc-rename)

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

function! s:set_coc_highlights()
    let l:guibg = synIDattr(synIDtrans(hlID("SignColumn")), "bg", "gui")
    let l:ctermbg = synIDattr(synIDtrans(hlID("SignColumn")), "bg", "cterm")
    let l:bg_str = ''
    if !empty(l:guibg)
        let l:bg_str .= ' guibg=' . l:guibg
    endif
    if !empty(l:ctermbg)
        let l:bg_str .= ' ctermbg=' . l:ctermbg
    endif
    execute 'highlight CocErrorSign ctermfg=Red guifg=#ff0000' . l:bg_str
    execute 'highlight CocWarningSign ctermfg=Brown guifg=#ff922b' . l:bg_str
    execute 'highlight CocInfoSign ctermfg=Yellow guifg=#fab005' . l:bg_str
    execute 'highlight CocHintSign ctermfg=Blue guifg=#15aabf' . l:bg_str
    highlight CocErrorHighlight cterm=undercurl gui=undercurl guisp=Red
    highlight CocWarningHighlight cterm=undercurl gui=undercurl guisp=Brown
    highlight CocInfoHighlight cterm=undercurl gui=undercurl guisp=Yellow
    highlight CocHintHighlight cterm=underline gui=underline guisp=#404040
endfunction

augroup coc
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

    autocmd FileType c,cpp,python setlocal signcolumn=number number
    autocmd FileType python let b:coc_root_patterns = ['__pycache__']
    autocmd FileType jsonc setlocal commentstring=//%s

    autocmd ColorScheme * call s:set_coc_highlights()
augroup END

augroup misc
    autocmd!
    autocmd BufRead,BufNewFile *.vx setfiletype verilog
    autocmd BufRead,BufNewFile gitconfig setfiletype gitconfig
    autocmd FileType arduino,c,cpp,cs,cuda setlocal commentstring=//%s
    autocmd FileType c,cpp,python setlocal foldmethod=indent
    autocmd FileType gitconfig,java setlocal noexpandtab

    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif " :help last-position-jump
augroup END


set termguicolors
let &t_8f = "\e[38;2;%lu;%lu;%lum"
let &t_8b = "\e[48;2;%lu;%lu;%lum"
if $TERM =~# '^\(mintty\|tmux\|vte\)\(-.*\)\?$'
    let &t_8u = "\e[58:2::%lu:%lu:%lum"
    let &t_Cs = "\e[4:3m"
    let &t_Ce = "\e[4:0m"
    let &t_Ts = "\e[9m"
    let &t_Te = "\e[29m"
elseif &t_Ce == ""
    set t_Cs= " undercurl needs t_Ce, so unset t_Cs to allow underline fallback
endif
let &t_SI = "\e[6 q"
let &t_SR = "\e[4 q"
let &t_EI = "\e[2 q"
if $TERM =~# '^mintty\(-.*\)\?$'
    set ttymouse=sgr
endif

if s:is_windows
    colorscheme default
else
    set background=dark
    colorscheme base16-tomorrow-night
endif

if filereadable(s:vimrc_local)
    execute 'source ' . s:vimrc_local
endif
